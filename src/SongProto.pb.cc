// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SongProto.proto

#include "SongProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SongDetailsCache {
namespace Structs {
PROTOBUF_CONSTEXPR SongDetailsV3::SongDetailsV3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.songs_)*/{}
  , /*decltype(_impl_.taglist_)*/{}
  , /*decltype(_impl_.songhashes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.formatversion_)*/0u
  , /*decltype(_impl_.scrapeendedunix_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SongDetailsV3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR SongDetailsV3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SongDetailsV3DefaultTypeInternal() {}
  union {
    SongDetailsV3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SongDetailsV3DefaultTypeInternal _SongDetailsV3_default_instance_;
PROTOBUF_CONSTEXPR SongV3::SongV3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.difficulties_)*/{}
  , /*decltype(_impl_.songname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.songauthorname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.levelauthorname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uploadername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bpm_)*/0
  , /*decltype(_impl_.upvotes_)*/0u
  , /*decltype(_impl_.downvotes_)*/0u
  , /*decltype(_impl_.uploadtimeunix_)*/0u
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.songdurationseconds_)*/0u
  , /*decltype(_impl_.rankedchangeunix_)*/0u
  , /*decltype(_impl_.rankedstatebitflags_)*/0
  , /*decltype(_impl_.tags_)*/uint64_t{0u}
  , /*decltype(_impl_.uploadflags_)*/0} {}
struct SongV3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR SongV3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SongV3DefaultTypeInternal() {}
  union {
    SongV3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SongV3DefaultTypeInternal _SongV3_default_instance_;
PROTOBUF_CONSTEXPR SongDifficulty::SongDifficulty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.characteristic_)*/0
  , /*decltype(_impl_.difficulty_)*/0
  , /*decltype(_impl_.starst100_)*/0u
  , /*decltype(_impl_.starst100bl_)*/0u
  , /*decltype(_impl_.njst100_)*/0u
  , /*decltype(_impl_.bombs_)*/0u
  , /*decltype(_impl_.notes_)*/0u
  , /*decltype(_impl_.obstacles_)*/0u
  , /*decltype(_impl_.mods_)*/0u} {}
struct SongDifficultyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SongDifficultyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SongDifficultyDefaultTypeInternal() {}
  union {
    SongDifficulty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SongDifficultyDefaultTypeInternal _SongDifficulty_default_instance_;
}  // namespace Structs
}  // namespace SongDetailsCache
static ::_pb::Metadata file_level_metadata_SongProto_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_SongProto_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SongProto_2eproto = nullptr;

const uint32_t TableStruct_SongProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDetailsV3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDetailsV3, _impl_.formatversion_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDetailsV3, _impl_.scrapeendedunix_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDetailsV3, _impl_.songhashes_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDetailsV3, _impl_.songs_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDetailsV3, _impl_.taglist_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.bpm_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.upvotes_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.downvotes_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.uploadtimeunix_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.songdurationseconds_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.songname_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.songauthorname_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.levelauthorname_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.uploadername_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.difficulties_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.rankedchangeunix_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.rankedstatebitflags_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongV3, _impl_.uploadflags_),
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_.characteristic_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_.difficulty_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_.starst100_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_.starst100bl_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_.njst100_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_.bombs_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_.obstacles_),
  PROTOBUF_FIELD_OFFSET(::SongDetailsCache::Structs::SongDifficulty, _impl_.mods_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SongDetailsCache::Structs::SongDetailsV3)},
  { 11, 32, -1, sizeof(::SongDetailsCache::Structs::SongV3)},
  { 47, 62, -1, sizeof(::SongDetailsCache::Structs::SongDifficulty)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SongDetailsCache::Structs::_SongDetailsV3_default_instance_._instance,
  &::SongDetailsCache::Structs::_SongV3_default_instance_._instance,
  &::SongDetailsCache::Structs::_SongDifficulty_default_instance_._instance,
};

const char descriptor_table_protodef_SongProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017SongProto.proto\022\030SongDetailsCache.Stru"
  "cts\"\225\001\n\rSongDetailsV3\022\025\n\rformatVersion\030\001"
  " \001(\r\022\027\n\017scrapeEndedUnix\030\002 \001(\r\022\022\n\nsongHas"
  "hes\030\003 \001(\014\022/\n\005songs\030\004 \003(\0132 .SongDetailsCa"
  "che.Structs.SongV3\022\017\n\007tagList\030\005 \003(\t\"\370\004\n\006"
  "SongV3\022\013\n\003bpm\030\001 \001(\002\022\024\n\007upvotes\030\002 \001(\rH\000\210\001"
  "\001\022\026\n\tdownvotes\030\003 \001(\rH\001\210\001\001\022\026\n\016uploadTimeU"
  "nix\030\004 \001(\r\022\r\n\005mapId\030\005 \001(\r\022 \n\023songDuration"
  "Seconds\030\006 \001(\rH\002\210\001\001\022\020\n\010songName\030\007 \001(\t\022\026\n\016"
  "songAuthorName\030\010 \001(\t\022\027\n\017levelAuthorName\030"
  "\t \001(\t\022\031\n\014uploaderName\030\n \001(\tH\003\210\001\001\022>\n\014diff"
  "iculties\030\013 \003(\0132(.SongDetailsCache.Struct"
  "s.SongDifficulty\022\035\n\020rankedChangeUnix\030\014 \001"
  "(\rH\004\210\001\001\022P\n\023rankedStateBitflags\030\r \001(\0162..S"
  "ongDetailsCache.Structs.RankedStatusBitf"
  "lagsH\005\210\001\001\022\021\n\004tags\030\016 \001(\004H\006\210\001\001\022\?\n\013uploadFl"
  "ags\030\017 \001(\0162%.SongDetailsCache.Structs.Upl"
  "oadFlagsH\007\210\001\001B\n\n\010_upvotesB\014\n\n_downvotesB"
  "\026\n\024_songDurationSecondsB\017\n\r_uploaderName"
  "B\023\n\021_rankedChangeUnixB\026\n\024_rankedStateBit"
  "flagsB\007\n\005_tagsB\016\n\014_uploadFlags\"\230\005\n\016SongD"
  "ifficulty\022W\n\016characteristic\030\001 \001(\0162:.Song"
  "DetailsCache.Structs.SongDifficulty.MapC"
  "haracteristicH\000\210\001\001\022O\n\ndifficulty\030\002 \001(\01626"
  ".SongDetailsCache.Structs.SongDifficulty"
  ".MapDifficultyH\001\210\001\001\022\026\n\tstarsT100\030\004 \001(\rH\002"
  "\210\001\001\022\030\n\013starsT100BL\030\005 \001(\rH\003\210\001\001\022\017\n\007njsT100"
  "\030\006 \001(\r\022\022\n\005bombs\030\007 \001(\rH\004\210\001\001\022\022\n\005notes\030\010 \001("
  "\rH\005\210\001\001\022\026\n\tobstacles\030\t \001(\rH\006\210\001\001\022\021\n\004mods\030\n"
  " \001(\rH\007\210\001\001\"\215\001\n\021MapCharacteristic\022\n\n\006Custo"
  "m\020\000\022\014\n\010Standard\020\001\022\014\n\010OneSaber\020\002\022\014\n\010NoArr"
  "ows\020\003\022\020\n\014NinetyDegree\020\004\022\024\n\020ThreeSixtyDeg"
  "ree\020\005\022\r\n\tLightshow\020\006\022\013\n\007Lawless\020\007\"K\n\rMap"
  "Difficulty\022\010\n\004Easy\020\000\022\n\n\006Normal\020\001\022\010\n\004Hard"
  "\020\002\022\n\n\006Expert\020\003\022\016\n\nExpertPlus\020\004B\021\n\017_chara"
  "cteristicB\r\n\013_difficultyB\014\n\n_starsT100B\016"
  "\n\014_starsT100BLB\010\n\006_bombsB\010\n\006_notesB\014\n\n_o"
  "bstaclesB\007\n\005_mods*b\n\024RankedStatusBitflag"
  "s\022\014\n\010Unranked\020\000\022\014\n\010RankedSS\020\001\022\014\n\010RankedB"
  "L\020\002\022\017\n\013QualifiedSS\020\004\022\017\n\013QualifiedBL\020\010*S\n"
  "\013UploadFlags\022\010\n\004None\020\000\022\016\n\nCuratedMap\020\001\022\024"
  "\n\020VerifiedUploader\020\002\022\024\n\020HasV3Environment"
  "\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_SongProto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SongProto_2eproto = {
    false, false, 1690, descriptor_table_protodef_SongProto_2eproto,
    "SongProto.proto",
    &descriptor_table_SongProto_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_SongProto_2eproto::offsets,
    file_level_metadata_SongProto_2eproto, file_level_enum_descriptors_SongProto_2eproto,
    file_level_service_descriptors_SongProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SongProto_2eproto_getter() {
  return &descriptor_table_SongProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SongProto_2eproto(&descriptor_table_SongProto_2eproto);
namespace SongDetailsCache {
namespace Structs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SongDifficulty_MapCharacteristic_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SongProto_2eproto);
  return file_level_enum_descriptors_SongProto_2eproto[0];
}
bool SongDifficulty_MapCharacteristic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SongDifficulty_MapCharacteristic SongDifficulty::Custom;
constexpr SongDifficulty_MapCharacteristic SongDifficulty::Standard;
constexpr SongDifficulty_MapCharacteristic SongDifficulty::OneSaber;
constexpr SongDifficulty_MapCharacteristic SongDifficulty::NoArrows;
constexpr SongDifficulty_MapCharacteristic SongDifficulty::NinetyDegree;
constexpr SongDifficulty_MapCharacteristic SongDifficulty::ThreeSixtyDegree;
constexpr SongDifficulty_MapCharacteristic SongDifficulty::Lightshow;
constexpr SongDifficulty_MapCharacteristic SongDifficulty::Lawless;
constexpr SongDifficulty_MapCharacteristic SongDifficulty::MapCharacteristic_MIN;
constexpr SongDifficulty_MapCharacteristic SongDifficulty::MapCharacteristic_MAX;
constexpr int SongDifficulty::MapCharacteristic_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SongDifficulty_MapDifficulty_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SongProto_2eproto);
  return file_level_enum_descriptors_SongProto_2eproto[1];
}
bool SongDifficulty_MapDifficulty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SongDifficulty_MapDifficulty SongDifficulty::Easy;
constexpr SongDifficulty_MapDifficulty SongDifficulty::Normal;
constexpr SongDifficulty_MapDifficulty SongDifficulty::Hard;
constexpr SongDifficulty_MapDifficulty SongDifficulty::Expert;
constexpr SongDifficulty_MapDifficulty SongDifficulty::ExpertPlus;
constexpr SongDifficulty_MapDifficulty SongDifficulty::MapDifficulty_MIN;
constexpr SongDifficulty_MapDifficulty SongDifficulty::MapDifficulty_MAX;
constexpr int SongDifficulty::MapDifficulty_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RankedStatusBitflags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SongProto_2eproto);
  return file_level_enum_descriptors_SongProto_2eproto[2];
}
bool RankedStatusBitflags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SongProto_2eproto);
  return file_level_enum_descriptors_SongProto_2eproto[3];
}
bool UploadFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SongDetailsV3::_Internal {
 public:
};

SongDetailsV3::SongDetailsV3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SongDetailsCache.Structs.SongDetailsV3)
}
SongDetailsV3::SongDetailsV3(const SongDetailsV3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SongDetailsV3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.songs_){from._impl_.songs_}
    , decltype(_impl_.taglist_){from._impl_.taglist_}
    , decltype(_impl_.songhashes_){}
    , decltype(_impl_.formatversion_){}
    , decltype(_impl_.scrapeendedunix_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.songhashes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songhashes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_songhashes().empty()) {
    _this->_impl_.songhashes_.Set(from._internal_songhashes(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.formatversion_, &from._impl_.formatversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scrapeendedunix_) -
    reinterpret_cast<char*>(&_impl_.formatversion_)) + sizeof(_impl_.scrapeendedunix_));
  // @@protoc_insertion_point(copy_constructor:SongDetailsCache.Structs.SongDetailsV3)
}

inline void SongDetailsV3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.songs_){arena}
    , decltype(_impl_.taglist_){arena}
    , decltype(_impl_.songhashes_){}
    , decltype(_impl_.formatversion_){0u}
    , decltype(_impl_.scrapeendedunix_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.songhashes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songhashes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SongDetailsV3::~SongDetailsV3() {
  // @@protoc_insertion_point(destructor:SongDetailsCache.Structs.SongDetailsV3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SongDetailsV3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.songs_.~RepeatedPtrField();
  _impl_.taglist_.~RepeatedPtrField();
  _impl_.songhashes_.Destroy();
}

void SongDetailsV3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SongDetailsV3::Clear() {
// @@protoc_insertion_point(message_clear_start:SongDetailsCache.Structs.SongDetailsV3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.songs_.Clear();
  _impl_.taglist_.Clear();
  _impl_.songhashes_.ClearToEmpty();
  ::memset(&_impl_.formatversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scrapeendedunix_) -
      reinterpret_cast<char*>(&_impl_.formatversion_)) + sizeof(_impl_.scrapeendedunix_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SongDetailsV3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 formatVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.formatversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 scrapeEndedUnix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scrapeendedunix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes songHashes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_songhashes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SongDetailsCache.Structs.SongV3 songs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_songs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tagList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_taglist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "SongDetailsCache.Structs.SongDetailsV3.tagList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SongDetailsV3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SongDetailsCache.Structs.SongDetailsV3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 formatVersion = 1;
  if (this->_internal_formatversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_formatversion(), target);
  }

  // uint32 scrapeEndedUnix = 2;
  if (this->_internal_scrapeendedunix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scrapeendedunix(), target);
  }

  // bytes songHashes = 3;
  if (!this->_internal_songhashes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_songhashes(), target);
  }

  // repeated .SongDetailsCache.Structs.SongV3 songs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_songs_size()); i < n; i++) {
    const auto& repfield = this->_internal_songs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string tagList = 5;
  for (int i = 0, n = this->_internal_taglist_size(); i < n; i++) {
    const auto& s = this->_internal_taglist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SongDetailsCache.Structs.SongDetailsV3.tagList");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SongDetailsCache.Structs.SongDetailsV3)
  return target;
}

size_t SongDetailsV3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SongDetailsCache.Structs.SongDetailsV3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SongDetailsCache.Structs.SongV3 songs = 4;
  total_size += 1UL * this->_internal_songs_size();
  for (const auto& msg : this->_impl_.songs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tagList = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.taglist_.size());
  for (int i = 0, n = _impl_.taglist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.taglist_.Get(i));
  }

  // bytes songHashes = 3;
  if (!this->_internal_songhashes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_songhashes());
  }

  // uint32 formatVersion = 1;
  if (this->_internal_formatversion() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formatversion());
  }

  // uint32 scrapeEndedUnix = 2;
  if (this->_internal_scrapeendedunix() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scrapeendedunix());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SongDetailsV3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SongDetailsV3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SongDetailsV3::GetClassData() const { return &_class_data_; }


void SongDetailsV3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SongDetailsV3*>(&to_msg);
  auto& from = static_cast<const SongDetailsV3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SongDetailsCache.Structs.SongDetailsV3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.songs_.MergeFrom(from._impl_.songs_);
  _this->_impl_.taglist_.MergeFrom(from._impl_.taglist_);
  if (!from._internal_songhashes().empty()) {
    _this->_internal_set_songhashes(from._internal_songhashes());
  }
  if (from._internal_formatversion() != 0) {
    _this->_internal_set_formatversion(from._internal_formatversion());
  }
  if (from._internal_scrapeendedunix() != 0) {
    _this->_internal_set_scrapeendedunix(from._internal_scrapeendedunix());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SongDetailsV3::CopyFrom(const SongDetailsV3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SongDetailsCache.Structs.SongDetailsV3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongDetailsV3::IsInitialized() const {
  return true;
}

void SongDetailsV3::InternalSwap(SongDetailsV3* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.songs_.InternalSwap(&other->_impl_.songs_);
  _impl_.taglist_.InternalSwap(&other->_impl_.taglist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.songhashes_, lhs_arena,
      &other->_impl_.songhashes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SongDetailsV3, _impl_.scrapeendedunix_)
      + sizeof(SongDetailsV3::_impl_.scrapeendedunix_)
      - PROTOBUF_FIELD_OFFSET(SongDetailsV3, _impl_.formatversion_)>(
          reinterpret_cast<char*>(&_impl_.formatversion_),
          reinterpret_cast<char*>(&other->_impl_.formatversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SongDetailsV3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SongProto_2eproto_getter, &descriptor_table_SongProto_2eproto_once,
      file_level_metadata_SongProto_2eproto[0]);
}

// ===================================================================

class SongV3::_Internal {
 public:
  using HasBits = decltype(std::declval<SongV3>()._impl_._has_bits_);
  static void set_has_upvotes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_downvotes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_songdurationseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uploadername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rankedchangeunix(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rankedstatebitflags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uploadflags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SongV3::SongV3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SongDetailsCache.Structs.SongV3)
}
SongV3::SongV3(const SongV3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SongV3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.difficulties_){from._impl_.difficulties_}
    , decltype(_impl_.songname_){}
    , decltype(_impl_.songauthorname_){}
    , decltype(_impl_.levelauthorname_){}
    , decltype(_impl_.uploadername_){}
    , decltype(_impl_.bpm_){}
    , decltype(_impl_.upvotes_){}
    , decltype(_impl_.downvotes_){}
    , decltype(_impl_.uploadtimeunix_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.songdurationseconds_){}
    , decltype(_impl_.rankedchangeunix_){}
    , decltype(_impl_.rankedstatebitflags_){}
    , decltype(_impl_.tags_){}
    , decltype(_impl_.uploadflags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.songname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_songname().empty()) {
    _this->_impl_.songname_.Set(from._internal_songname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.songauthorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songauthorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_songauthorname().empty()) {
    _this->_impl_.songauthorname_.Set(from._internal_songauthorname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.levelauthorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.levelauthorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_levelauthorname().empty()) {
    _this->_impl_.levelauthorname_.Set(from._internal_levelauthorname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uploadername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploadername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uploadername()) {
    _this->_impl_.uploadername_.Set(from._internal_uploadername(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bpm_, &from._impl_.bpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uploadflags_) -
    reinterpret_cast<char*>(&_impl_.bpm_)) + sizeof(_impl_.uploadflags_));
  // @@protoc_insertion_point(copy_constructor:SongDetailsCache.Structs.SongV3)
}

inline void SongV3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.difficulties_){arena}
    , decltype(_impl_.songname_){}
    , decltype(_impl_.songauthorname_){}
    , decltype(_impl_.levelauthorname_){}
    , decltype(_impl_.uploadername_){}
    , decltype(_impl_.bpm_){0}
    , decltype(_impl_.upvotes_){0u}
    , decltype(_impl_.downvotes_){0u}
    , decltype(_impl_.uploadtimeunix_){0u}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.songdurationseconds_){0u}
    , decltype(_impl_.rankedchangeunix_){0u}
    , decltype(_impl_.rankedstatebitflags_){0}
    , decltype(_impl_.tags_){uint64_t{0u}}
    , decltype(_impl_.uploadflags_){0}
  };
  _impl_.songname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.songauthorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.songauthorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.levelauthorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.levelauthorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uploadername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uploadername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SongV3::~SongV3() {
  // @@protoc_insertion_point(destructor:SongDetailsCache.Structs.SongV3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SongV3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.difficulties_.~RepeatedPtrField();
  _impl_.songname_.Destroy();
  _impl_.songauthorname_.Destroy();
  _impl_.levelauthorname_.Destroy();
  _impl_.uploadername_.Destroy();
}

void SongV3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SongV3::Clear() {
// @@protoc_insertion_point(message_clear_start:SongDetailsCache.Structs.SongV3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.difficulties_.Clear();
  _impl_.songname_.ClearToEmpty();
  _impl_.songauthorname_.ClearToEmpty();
  _impl_.levelauthorname_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.uploadername_.ClearNonDefaultToEmpty();
  }
  _impl_.bpm_ = 0;
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.upvotes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.downvotes_) -
        reinterpret_cast<char*>(&_impl_.upvotes_)) + sizeof(_impl_.downvotes_));
  }
  ::memset(&_impl_.uploadtimeunix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mapid_) -
      reinterpret_cast<char*>(&_impl_.uploadtimeunix_)) + sizeof(_impl_.mapid_));
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.songdurationseconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.uploadflags_) -
        reinterpret_cast<char*>(&_impl_.songdurationseconds_)) + sizeof(_impl_.uploadflags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SongV3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float bpm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.bpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 upvotes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_upvotes(&has_bits);
          _impl_.upvotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 downvotes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_downvotes(&has_bits);
          _impl_.downvotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uploadTimeUnix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.uploadtimeunix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mapId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 songDurationSeconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_songdurationseconds(&has_bits);
          _impl_.songdurationseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string songName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_songname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SongDetailsCache.Structs.SongV3.songName"));
        } else
          goto handle_unusual;
        continue;
      // string songAuthorName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_songauthorname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SongDetailsCache.Structs.SongV3.songAuthorName"));
        } else
          goto handle_unusual;
        continue;
      // string levelAuthorName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_levelauthorname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SongDetailsCache.Structs.SongV3.levelAuthorName"));
        } else
          goto handle_unusual;
        continue;
      // optional string uploaderName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_uploadername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SongDetailsCache.Structs.SongV3.uploaderName"));
        } else
          goto handle_unusual;
        continue;
      // repeated .SongDetailsCache.Structs.SongDifficulty difficulties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_difficulties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rankedChangeUnix = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_rankedchangeunix(&has_bits);
          _impl_.rankedchangeunix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SongDetailsCache.Structs.RankedStatusBitflags rankedStateBitflags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rankedstatebitflags(static_cast<::SongDetailsCache::Structs::RankedStatusBitflags>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tags = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tags(&has_bits);
          _impl_.tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SongDetailsCache.Structs.UploadFlags uploadFlags = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_uploadflags(static_cast<::SongDetailsCache::Structs::UploadFlags>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SongV3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SongDetailsCache.Structs.SongV3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float bpm = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bpm = this->_internal_bpm();
  uint32_t raw_bpm;
  memcpy(&raw_bpm, &tmp_bpm, sizeof(tmp_bpm));
  if (raw_bpm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_bpm(), target);
  }

  // optional uint32 upvotes = 2;
  if (_internal_has_upvotes()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_upvotes(), target);
  }

  // optional uint32 downvotes = 3;
  if (_internal_has_downvotes()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_downvotes(), target);
  }

  // uint32 uploadTimeUnix = 4;
  if (this->_internal_uploadtimeunix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uploadtimeunix(), target);
  }

  // uint32 mapId = 5;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mapid(), target);
  }

  // optional uint32 songDurationSeconds = 6;
  if (_internal_has_songdurationseconds()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_songdurationseconds(), target);
  }

  // string songName = 7;
  if (!this->_internal_songname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_songname().data(), static_cast<int>(this->_internal_songname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SongDetailsCache.Structs.SongV3.songName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_songname(), target);
  }

  // string songAuthorName = 8;
  if (!this->_internal_songauthorname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_songauthorname().data(), static_cast<int>(this->_internal_songauthorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SongDetailsCache.Structs.SongV3.songAuthorName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_songauthorname(), target);
  }

  // string levelAuthorName = 9;
  if (!this->_internal_levelauthorname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_levelauthorname().data(), static_cast<int>(this->_internal_levelauthorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SongDetailsCache.Structs.SongV3.levelAuthorName");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_levelauthorname(), target);
  }

  // optional string uploaderName = 10;
  if (_internal_has_uploadername()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uploadername().data(), static_cast<int>(this->_internal_uploadername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SongDetailsCache.Structs.SongV3.uploaderName");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_uploadername(), target);
  }

  // repeated .SongDetailsCache.Structs.SongDifficulty difficulties = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_difficulties_size()); i < n; i++) {
    const auto& repfield = this->_internal_difficulties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 rankedChangeUnix = 12;
  if (_internal_has_rankedchangeunix()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_rankedchangeunix(), target);
  }

  // optional .SongDetailsCache.Structs.RankedStatusBitflags rankedStateBitflags = 13;
  if (_internal_has_rankedstatebitflags()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_rankedstatebitflags(), target);
  }

  // optional uint64 tags = 14;
  if (_internal_has_tags()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_tags(), target);
  }

  // optional .SongDetailsCache.Structs.UploadFlags uploadFlags = 15;
  if (_internal_has_uploadflags()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_uploadflags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SongDetailsCache.Structs.SongV3)
  return target;
}

size_t SongV3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SongDetailsCache.Structs.SongV3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SongDetailsCache.Structs.SongDifficulty difficulties = 11;
  total_size += 1UL * this->_internal_difficulties_size();
  for (const auto& msg : this->_impl_.difficulties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string songName = 7;
  if (!this->_internal_songname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_songname());
  }

  // string songAuthorName = 8;
  if (!this->_internal_songauthorname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_songauthorname());
  }

  // string levelAuthorName = 9;
  if (!this->_internal_levelauthorname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_levelauthorname());
  }

  // optional string uploaderName = 10;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uploadername());
  }

  // float bpm = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bpm = this->_internal_bpm();
  uint32_t raw_bpm;
  memcpy(&raw_bpm, &tmp_bpm, sizeof(tmp_bpm));
  if (raw_bpm != 0) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x00000006u) {
    // optional uint32 upvotes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_upvotes());
    }

    // optional uint32 downvotes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_downvotes());
    }

  }
  // uint32 uploadTimeUnix = 4;
  if (this->_internal_uploadtimeunix() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uploadtimeunix());
  }

  // uint32 mapId = 5;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional uint32 songDurationSeconds = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_songdurationseconds());
    }

    // optional uint32 rankedChangeUnix = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rankedchangeunix());
    }

    // optional .SongDetailsCache.Structs.RankedStatusBitflags rankedStateBitflags = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rankedstatebitflags());
    }

    // optional uint64 tags = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tags());
    }

    // optional .SongDetailsCache.Structs.UploadFlags uploadFlags = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_uploadflags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SongV3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SongV3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SongV3::GetClassData() const { return &_class_data_; }


void SongV3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SongV3*>(&to_msg);
  auto& from = static_cast<const SongV3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SongDetailsCache.Structs.SongV3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.difficulties_.MergeFrom(from._impl_.difficulties_);
  if (!from._internal_songname().empty()) {
    _this->_internal_set_songname(from._internal_songname());
  }
  if (!from._internal_songauthorname().empty()) {
    _this->_internal_set_songauthorname(from._internal_songauthorname());
  }
  if (!from._internal_levelauthorname().empty()) {
    _this->_internal_set_levelauthorname(from._internal_levelauthorname());
  }
  if (from._internal_has_uploadername()) {
    _this->_internal_set_uploadername(from._internal_uploadername());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bpm = from._internal_bpm();
  uint32_t raw_bpm;
  memcpy(&raw_bpm, &tmp_bpm, sizeof(tmp_bpm));
  if (raw_bpm != 0) {
    _this->_internal_set_bpm(from._internal_bpm());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.upvotes_ = from._impl_.upvotes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.downvotes_ = from._impl_.downvotes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_uploadtimeunix() != 0) {
    _this->_internal_set_uploadtimeunix(from._internal_uploadtimeunix());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (cached_has_bits & 0x000000f8u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.songdurationseconds_ = from._impl_.songdurationseconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rankedchangeunix_ = from._impl_.rankedchangeunix_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rankedstatebitflags_ = from._impl_.rankedstatebitflags_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tags_ = from._impl_.tags_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.uploadflags_ = from._impl_.uploadflags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SongV3::CopyFrom(const SongV3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SongDetailsCache.Structs.SongV3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongV3::IsInitialized() const {
  return true;
}

void SongV3::InternalSwap(SongV3* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.difficulties_.InternalSwap(&other->_impl_.difficulties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.songname_, lhs_arena,
      &other->_impl_.songname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.songauthorname_, lhs_arena,
      &other->_impl_.songauthorname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.levelauthorname_, lhs_arena,
      &other->_impl_.levelauthorname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uploadername_, lhs_arena,
      &other->_impl_.uploadername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SongV3, _impl_.uploadflags_)
      + sizeof(SongV3::_impl_.uploadflags_)
      - PROTOBUF_FIELD_OFFSET(SongV3, _impl_.bpm_)>(
          reinterpret_cast<char*>(&_impl_.bpm_),
          reinterpret_cast<char*>(&other->_impl_.bpm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SongV3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SongProto_2eproto_getter, &descriptor_table_SongProto_2eproto_once,
      file_level_metadata_SongProto_2eproto[1]);
}

// ===================================================================

class SongDifficulty::_Internal {
 public:
  using HasBits = decltype(std::declval<SongDifficulty>()._impl_._has_bits_);
  static void set_has_characteristic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starst100(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_starst100bl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bombs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_notes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_obstacles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mods(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SongDifficulty::SongDifficulty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SongDetailsCache.Structs.SongDifficulty)
}
SongDifficulty::SongDifficulty(const SongDifficulty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SongDifficulty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.characteristic_){}
    , decltype(_impl_.difficulty_){}
    , decltype(_impl_.starst100_){}
    , decltype(_impl_.starst100bl_){}
    , decltype(_impl_.njst100_){}
    , decltype(_impl_.bombs_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.obstacles_){}
    , decltype(_impl_.mods_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.characteristic_, &from._impl_.characteristic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mods_) -
    reinterpret_cast<char*>(&_impl_.characteristic_)) + sizeof(_impl_.mods_));
  // @@protoc_insertion_point(copy_constructor:SongDetailsCache.Structs.SongDifficulty)
}

inline void SongDifficulty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.characteristic_){0}
    , decltype(_impl_.difficulty_){0}
    , decltype(_impl_.starst100_){0u}
    , decltype(_impl_.starst100bl_){0u}
    , decltype(_impl_.njst100_){0u}
    , decltype(_impl_.bombs_){0u}
    , decltype(_impl_.notes_){0u}
    , decltype(_impl_.obstacles_){0u}
    , decltype(_impl_.mods_){0u}
  };
}

SongDifficulty::~SongDifficulty() {
  // @@protoc_insertion_point(destructor:SongDetailsCache.Structs.SongDifficulty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SongDifficulty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SongDifficulty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SongDifficulty::Clear() {
// @@protoc_insertion_point(message_clear_start:SongDetailsCache.Structs.SongDifficulty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.characteristic_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.starst100bl_) -
        reinterpret_cast<char*>(&_impl_.characteristic_)) + sizeof(_impl_.starst100bl_));
  }
  _impl_.njst100_ = 0u;
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.bombs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mods_) -
        reinterpret_cast<char*>(&_impl_.bombs_)) + sizeof(_impl_.mods_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SongDifficulty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SongDetailsCache.Structs.SongDifficulty.MapCharacteristic characteristic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_characteristic(static_cast<::SongDetailsCache::Structs::SongDifficulty_MapCharacteristic>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .SongDetailsCache.Structs.SongDifficulty.MapDifficulty difficulty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_difficulty(static_cast<::SongDetailsCache::Structs::SongDifficulty_MapDifficulty>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 starsT100 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_starst100(&has_bits);
          _impl_.starst100_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 starsT100BL = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_starst100bl(&has_bits);
          _impl_.starst100bl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 njsT100 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.njst100_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bombs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bombs(&has_bits);
          _impl_.bombs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 notes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_notes(&has_bits);
          _impl_.notes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 obstacles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_obstacles(&has_bits);
          _impl_.obstacles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mods = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_mods(&has_bits);
          _impl_.mods_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SongDifficulty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SongDetailsCache.Structs.SongDifficulty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .SongDetailsCache.Structs.SongDifficulty.MapCharacteristic characteristic = 1;
  if (_internal_has_characteristic()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_characteristic(), target);
  }

  // optional .SongDetailsCache.Structs.SongDifficulty.MapDifficulty difficulty = 2;
  if (_internal_has_difficulty()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_difficulty(), target);
  }

  // optional uint32 starsT100 = 4;
  if (_internal_has_starst100()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_starst100(), target);
  }

  // optional uint32 starsT100BL = 5;
  if (_internal_has_starst100bl()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_starst100bl(), target);
  }

  // uint32 njsT100 = 6;
  if (this->_internal_njst100() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_njst100(), target);
  }

  // optional uint32 bombs = 7;
  if (_internal_has_bombs()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bombs(), target);
  }

  // optional uint32 notes = 8;
  if (_internal_has_notes()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_notes(), target);
  }

  // optional uint32 obstacles = 9;
  if (_internal_has_obstacles()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_obstacles(), target);
  }

  // optional uint32 mods = 10;
  if (_internal_has_mods()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_mods(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SongDetailsCache.Structs.SongDifficulty)
  return target;
}

size_t SongDifficulty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SongDetailsCache.Structs.SongDifficulty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .SongDetailsCache.Structs.SongDifficulty.MapCharacteristic characteristic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_characteristic());
    }

    // optional .SongDetailsCache.Structs.SongDifficulty.MapDifficulty difficulty = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_difficulty());
    }

    // optional uint32 starsT100 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starst100());
    }

    // optional uint32 starsT100BL = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starst100bl());
    }

  }
  // uint32 njsT100 = 6;
  if (this->_internal_njst100() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_njst100());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional uint32 bombs = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bombs());
    }

    // optional uint32 notes = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_notes());
    }

    // optional uint32 obstacles = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_obstacles());
    }

    // optional uint32 mods = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mods());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SongDifficulty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SongDifficulty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SongDifficulty::GetClassData() const { return &_class_data_; }


void SongDifficulty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SongDifficulty*>(&to_msg);
  auto& from = static_cast<const SongDifficulty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SongDetailsCache.Structs.SongDifficulty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.characteristic_ = from._impl_.characteristic_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.difficulty_ = from._impl_.difficulty_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.starst100_ = from._impl_.starst100_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.starst100bl_ = from._impl_.starst100bl_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_njst100() != 0) {
    _this->_internal_set_njst100(from._internal_njst100());
  }
  if (cached_has_bits & 0x000000f0u) {
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bombs_ = from._impl_.bombs_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.notes_ = from._impl_.notes_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.obstacles_ = from._impl_.obstacles_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.mods_ = from._impl_.mods_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SongDifficulty::CopyFrom(const SongDifficulty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SongDetailsCache.Structs.SongDifficulty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongDifficulty::IsInitialized() const {
  return true;
}

void SongDifficulty::InternalSwap(SongDifficulty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SongDifficulty, _impl_.mods_)
      + sizeof(SongDifficulty::_impl_.mods_)
      - PROTOBUF_FIELD_OFFSET(SongDifficulty, _impl_.characteristic_)>(
          reinterpret_cast<char*>(&_impl_.characteristic_),
          reinterpret_cast<char*>(&other->_impl_.characteristic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SongDifficulty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SongProto_2eproto_getter, &descriptor_table_SongProto_2eproto_once,
      file_level_metadata_SongProto_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Structs
}  // namespace SongDetailsCache
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SongDetailsCache::Structs::SongDetailsV3*
Arena::CreateMaybeMessage< ::SongDetailsCache::Structs::SongDetailsV3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SongDetailsCache::Structs::SongDetailsV3 >(arena);
}
template<> PROTOBUF_NOINLINE ::SongDetailsCache::Structs::SongV3*
Arena::CreateMaybeMessage< ::SongDetailsCache::Structs::SongV3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SongDetailsCache::Structs::SongV3 >(arena);
}
template<> PROTOBUF_NOINLINE ::SongDetailsCache::Structs::SongDifficulty*
Arena::CreateMaybeMessage< ::SongDetailsCache::Structs::SongDifficulty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SongDetailsCache::Structs::SongDifficulty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
